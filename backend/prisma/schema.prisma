generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp")]
}

model User {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email            String            @unique
  firstName        String
  lastName         String
  displayName      String?
  avatar           String?
  phone            String?
  timezone         String?           @default("UTC")
  locale           String?           @default("en-US")
  title            String?
  department       String?
  managerId        String?           @db.Uuid
  organizationId   String?           @db.Uuid
  isActive         Boolean?          @default(true)
  lastLoginAt      DateTime?         @db.Timestamptz(6)
  emailVerifiedAt  DateTime?         @db.Timestamptz(6)
  createdAt        DateTime?         @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime?         @default(now()) @updatedAt @db.Timestamptz(6)
  auditLogs        AuditLog[]
  authProviders    AuthProvider[]
  deviceSessions   DeviceSession[]
  kudosGiven       Kudos[]           @relation("KudosGiver")
  kudosReceived    Kudos[]           @relation("KudosReceiver")
  leaveApprovals   LeaveApproval[]
  leaveRequests    LeaveRequest[]
  notifications    Notification[]
  projectReporting ProjectMember[]   @relation("ProjectReporting")
  projectMembers   ProjectMember[]
  ownedProjects    Project[]         @relation("ProjectOwner")
  teamMembers      TeamMember[]
  ledTeams         Team[]            @relation("TeamLeader")
  timeSessions     TimeSession[]
  accessLevels     UserAccessLevel[]
  achievements     UserAchievement[]
  userPermissions  UserPermission[]
  userRoles        UserRole[]
  sessions         UserSession[]
  manager          User?             @relation("UserHierarchy", fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subordinates     User[]            @relation("UserHierarchy")
  organization     Organization?     @relation(fields: [organizationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  workLogs         WorkLog[]

  @@index([email], map: "idx_users_email")
  @@index([organizationId], map: "idx_users_organization_id")
  @@map("users")
}

model AuthProvider {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String    @db.Uuid
  provider     String
  providerId   String
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime? @db.Timestamptz(6)
  createdAt    DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, providerId])
  @@map("auth_providers")
}

model UserSession {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String    @db.Uuid
  sessionToken   String    @unique
  deviceInfo     String?
  ipAddress      String?
  userAgent      String?
  isActive       Boolean?  @default(true)
  expiresAt      DateTime  @db.Timestamptz(6)
  createdAt      DateTime? @default(now()) @db.Timestamptz(6)
  lastAccessedAt DateTime? @default(now()) @db.Timestamptz(6)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("user_sessions")
}

model DeviceSession {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String    @db.Uuid
  deviceId   String
  platform   String?
  appVersion String?
  deviceName String?
  osVersion  String?
  lastUsedAt DateTime? @default(now()) @db.Timestamptz(6)
  isActive   Boolean?  @default(true)
  createdAt  DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, deviceId])
  @@index([userId, isActive], map: "idx_device_sessions_user_id_active")
  @@map("device_sessions")
}

model Role {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String           @unique
  displayName     String
  description     String?
  isSystem        Boolean?         @default(false)
  isActive        Boolean?         @default(true)
  createdAt       DateTime?        @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime?        @default(now()) @updatedAt @db.Timestamptz(6)
  rolePermissions RolePermission[]
  userRoles       UserRole[]

  @@map("roles")
}

model Permission {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String           @unique
  displayName     String
  description     String?
  resource        String
  action          String
  isSystem        Boolean?         @default(false)
  createdAt       DateTime?        @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime?        @default(now()) @updatedAt @db.Timestamptz(6)
  rolePermissions RolePermission[]
  userPermissions UserPermission[]

  @@unique([resource, action])
  @@map("permissions")
}

model UserRole {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String    @db.Uuid
  roleId    String    @db.Uuid
  scope     Json?
  grantedBy String?   @db.Uuid
  grantedAt DateTime? @default(now()) @db.Timestamptz(6)
  expiresAt DateTime? @db.Timestamptz(6)
  isActive  Boolean?  @default(true)
  role      Role      @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  roleId       String     @db.Uuid
  permissionId String     @db.Uuid
  createdAt    DateTime?  @default(now()) @db.Timestamptz(6)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model UserPermission {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String     @db.Uuid
  permissionId String     @db.Uuid
  scope        Json?
  grantedBy    String?    @db.Uuid
  grantedAt    DateTime?  @default(now()) @db.Timestamptz(6)
  expiresAt    DateTime?  @db.Timestamptz(6)
  isActive     Boolean?   @default(true)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, permissionId])
  @@map("user_permissions")
}

model UserAccessLevel {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String      @db.Uuid
  level     AccessLevel
  createdAt DateTime?   @default(now()) @db.Timestamptz(6)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, level])
  @@map("user_access_levels")
}

model Organization {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  domain    String    @unique
  logo      String?
  settings  Json?     @default("{}")
  isActive  Boolean?  @default(true)
  createdAt DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  projects  Project[]
  teams     Team[]
  users     User[]

  @@map("organizations")
}

model Project {
  id                 String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId     String          @db.Uuid
  name               String
  description        String?
  code               String
  status             ProjectStatus?  @default(PLANNING)
  priority           Priority?       @default(MEDIUM)
  startDate          DateTime?       @db.Timestamptz(6)
  endDate            DateTime?       @db.Timestamptz(6)
  budget             Decimal?        @db.Decimal(15, 2)
  currency           String?         @default("USD")
  clientName         String?
  ownerId            String          @db.Uuid
  settings           Json?           @default("{}")
  modules            String[]        @default([])
  taskCategories     String[]        @default([])
  workCategories     String[]        @default([])
  severityCategories String[]        @default([])
  sourceCategories   String[]        @default([])
  isActive           Boolean?        @default(true)
  createdAt          DateTime?       @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime?       @default(now()) @updatedAt @db.Timestamptz(6)
  milestones         Milestone[]
  members            ProjectMember[]
  teams              ProjectTeam[]
  organization       Organization    @relation(fields: [organizationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  owner              User            @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tickets            Ticket[]
  timeSessions       TimeSession[]
  workLogs           WorkLog[]

  @@unique([organizationId, code])
  @@map("projects")
}

model Team {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId String          @db.Uuid
  name           String
  description    String?
  leaderId       String          @db.Uuid
  settings       Json?           @default("{}")
  isActive       Boolean?        @default(true)
  createdAt      DateTime?       @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime?       @default(now()) @updatedAt @db.Timestamptz(6)
  projects       ProjectTeam[]
  schedules      ShiftSchedule[]
  members        TeamMember[]
  leader         User            @relation("TeamLeader", fields: [leaderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("teams")
}

model ProjectMember {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId     String    @db.Uuid
  userId        String    @db.Uuid
  role          String?   @default("member")
  reportingToId String?   @db.Uuid
  hourlyRate    Decimal?  @db.Decimal(8, 2)
  joinedAt      DateTime? @default(now()) @db.Timestamptz(6)
  leftAt        DateTime? @db.Timestamptz(6)
  isActive      Boolean?  @default(true)
  project       Project   @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  reportingTo   User?     @relation("ProjectReporting", fields: [reportingToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([projectId, userId])
  @@map("project_members")
}

model TeamMember {
  id       String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  teamId   String    @db.Uuid
  userId   String    @db.Uuid
  role     String?   @default("member")
  joinedAt DateTime? @default(now()) @db.Timestamptz(6)
  leftAt   DateTime? @db.Timestamptz(6)
  isActive Boolean?  @default(true)
  team     Team      @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([teamId, userId])
  @@map("team_members")
}

model ProjectTeam {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId  String    @db.Uuid
  teamId     String    @db.Uuid
  assignedAt DateTime? @default(now()) @db.Timestamptz(6)
  isActive   Boolean?  @default(true)
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  team       Team      @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([projectId, teamId])
  @@map("project_teams")
}

model Milestone {
  id          String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId   String           @db.Uuid
  name        String
  description String?
  dueDate     DateTime         @db.Timestamptz(6)
  status      MilestoneStatus? @default(PENDING)
  completedAt DateTime?        @db.Timestamptz(6)
  createdAt   DateTime?        @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime?        @default(now()) @updatedAt @db.Timestamptz(6)
  project     Project          @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("milestones")
}

model WorkLog {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId           String    @db.Uuid
  projectId        String    @db.Uuid
  ticketId         String?   @db.Uuid
  description      String
  duration         Int
  startTime        DateTime  @db.Timestamptz(6)
  endTime          DateTime  @db.Timestamptz(6)
  isBillable       Boolean?  @default(true)
  hourlyRate       Decimal?  @db.Decimal(8, 2)
  tags             String[]  @default([])
  metadata         Json?     @default("{}")
  importSource     String?
  importId         String?
  isApproved       Boolean?  @default(false)
  approvedBy       String?   @db.Uuid
  approvedAt       DateTime? @db.Timestamptz(6)
  module           String?
  taskCategory     String?
  workCategory     String?
  severityCategory String?
  sourceCategory   String?
  ticketReference  String?
  createdAt        DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  project          Project   @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ticket           Ticket?   @relation(fields: [ticketId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([projectId], map: "idx_work_logs_project_id")
  @@index([startTime], map: "idx_work_logs_start_time")
  @@index([userId], map: "idx_work_logs_user_id")
  @@map("work_logs")
}

model TimeSession {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId           String             @db.Uuid
  projectId        String             @db.Uuid
  ticketId         String?            @db.Uuid
  description      String?
  startTime        DateTime           @db.Timestamptz(6)
  endTime          DateTime?          @db.Timestamptz(6)
  status           TimeSessionStatus? @default(RUNNING)
  pausedDuration   Int?               @default(0)
  module           String?
  taskCategory     String?
  workCategory     String?
  severityCategory String?
  sourceCategory   String?
  ticketReference  String?
  metadata         Json?              @default("{}")
  createdAt        DateTime?          @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime?          @default(now()) @updatedAt @db.Timestamptz(6)
  project          Project            @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId, status], map: "idx_time_sessions_user_id_status")
  @@map("time_sessions")
}

model Ticket {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId      String    @db.Uuid
  externalId     String
  title          String
  description    String?
  status         String
  priority       String?
  type           String?
  assigneeId     String?   @db.Uuid
  reporterId     String?   @db.Uuid
  labels         String[]  @default([])
  estimatedHours Decimal?  @db.Decimal(8, 2)
  source         String
  sourceData     Json?     @default("{}")
  lastSyncAt     DateTime? @db.Timestamptz(6)
  createdAt      DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  project        Project   @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  workLogs       WorkLog[]

  @@unique([projectId, externalId])
  @@index([source, externalId], map: "idx_tickets_source_external_id")
  @@map("tickets")
}

model Integration {
  id           String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  type         IntegrationType
  config       Json
  isActive     Boolean?             @default(true)
  lastSyncAt   DateTime?            @db.Timestamptz(6)
  syncStatus   IntegrationStatus?   @default(INACTIVE)
  errorMessage String?
  createdAt    DateTime?            @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime?            @default(now()) @updatedAt @db.Timestamptz(6)
  syncLogs     IntegrationSyncLog[]

  @@map("integrations")
}

model IntegrationSyncLog {
  id               String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  integrationId    String      @db.Uuid
  operation        String
  status           String
  recordsProcessed Int?        @default(0)
  recordsSuccess   Int?        @default(0)
  recordsError     Int?        @default(0)
  errorDetails     Json?
  startedAt        DateTime?   @default(now()) @db.Timestamptz(6)
  completedAt      DateTime?   @db.Timestamptz(6)
  duration         Int?
  integration      Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("integration_sync_logs")
}

model Notification {
  id        String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String           @db.Uuid
  type      NotificationType
  title     String
  message   String
  data      Json?            @default("{}")
  isRead    Boolean?         @default(false)
  readAt    DateTime?        @db.Timestamptz(6)
  channel   String?          @default("in_app")
  priority  Priority?        @default(MEDIUM)
  expiresAt DateTime?        @db.Timestamptz(6)
  createdAt DateTime?        @default(now()) @db.Timestamptz(6)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId, createdAt], map: "idx_notifications_user_id_created")
  @@index([userId, isRead], map: "idx_notifications_user_id_read")
  @@map("notifications")
}

model SystemSetting {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key         String    @unique
  value       Json
  description String?
  category    String?   @default("general")
  isPublic    Boolean?  @default(false)
  updatedBy   String?   @db.Uuid
  createdAt   DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime? @default(now()) @updatedAt @db.Timestamptz(6)

  @@map("system_settings")
}

model CustomField {
  id           String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  key          String
  type         CustomFieldType
  options      Json?
  isRequired   Boolean?        @default(false)
  defaultValue Json?
  entity       String
  isActive     Boolean?        @default(true)
  createdAt    DateTime?       @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime?       @default(now()) @updatedAt @db.Timestamptz(6)

  @@unique([entity, key])
  @@map("custom_fields")
}

model AuditLog {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String?   @db.Uuid
  action    String
  entity    String
  entityId  String?   @db.Uuid
  oldValues Json?
  newValues Json?
  ipAddress String?
  userAgent String?
  sessionId String?
  metadata  Json?     @default("{}")
  timestamp DateTime? @default(now()) @db.Timestamptz(6)
  user      User?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([entity, entityId], map: "idx_audit_logs_entity_entity_id")
  @@index([timestamp], map: "idx_audit_logs_timestamp")
  @@index([userId, timestamp], map: "idx_audit_logs_user_id_timestamp")
  @@map("audit_logs")
}

model DailyAuditHash {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date      DateTime  @unique @db.Date
  hash      String
  createdAt DateTime? @default(now()) @db.Timestamptz(6)

  @@map("daily_audit_hashes")
}

model ImportSession {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId           String        @db.Uuid
  type             String
  source           String
  fileName         String
  fileSize         Int
  totalRecords     Int?          @default(0)
  processedRecords Int?          @default(0)
  successRecords   Int?          @default(0)
  errorRecords     Int?          @default(0)
  status           ImportStatus? @default(PENDING)
  errorDetails     Json?
  startedAt        DateTime?     @default(now()) @db.Timestamptz(6)
  completedAt      DateTime?     @db.Timestamptz(6)
  settings         Json?         @default("{}")

  @@map("import_sessions")
}

model ExportSession {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String        @db.Uuid
  type        String
  format      String
  filters     Json?         @default("{}")
  fileName    String?
  fileSize    Int?
  recordCount Int?
  status      ExportStatus? @default(PENDING)
  downloadUrl String?
  expiresAt   DateTime?     @db.Timestamptz(6)
  startedAt   DateTime?     @default(now()) @db.Timestamptz(6)
  completedAt DateTime?     @db.Timestamptz(6)

  @@map("export_sessions")
}

model KnowledgeBase {
  id          String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?
  type        KnowledgeBaseType? @default(GENERAL)
  isActive    Boolean?           @default(true)
  settings    Json?              @default("{}")
  createdAt   DateTime?          @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime?          @default(now()) @updatedAt @db.Timestamptz(6)
  documents   Document[]

  @@map("knowledge_bases")
}

model Document {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  knowledgeBaseId String        @db.Uuid
  title           String
  content         String
  type            DocumentType? @default(TEXT)
  source          String?
  metadata        Json?         @default("{}")
  isIndexed       Boolean?      @default(false)
  indexedAt       DateTime?     @db.Timestamptz(6)
  createdAt       DateTime?     @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime?     @default(now()) @updatedAt @db.Timestamptz(6)
  knowledgeBase   KnowledgeBase @relation(fields: [knowledgeBaseId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("documents")
}

model ChatSession {
  id        String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String        @db.Uuid
  title     String?
  isActive  Boolean?      @default(true)
  createdAt DateTime?     @default(now()) @db.Timestamptz(6)
  updatedAt DateTime?     @default(now()) @updatedAt @db.Timestamptz(6)
  messages  ChatMessage[]

  @@map("chat_sessions")
}

model ChatMessage {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionId String      @db.Uuid
  role      String
  content   String
  metadata  Json?       @default("{}")
  createdAt DateTime?   @default(now()) @db.Timestamptz(6)
  session   ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("chat_messages")
}

model Kudos {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  giverId    String    @db.Uuid
  receiverId String    @db.Uuid
  message    String
  type       String?   @default("general")
  isPublic   Boolean?  @default(true)
  createdAt  DateTime? @default(now()) @db.Timestamptz(6)
  giver      User      @relation("KudosGiver", fields: [giverId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  receiver   User      @relation("KudosReceiver", fields: [receiverId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("kudos")
}

model Achievement {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String
  description      String
  icon             String?
  criteria         Json
  points           Int?              @default(0)
  isActive         Boolean?          @default(true)
  createdAt        DateTime?         @default(now()) @db.Timestamptz(6)
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String      @db.Uuid
  achievementId String      @db.Uuid
  earnedAt      DateTime?   @default(now()) @db.Timestamptz(6)
  metadata      Json?       @default("{}")
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model LeaveType {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String         @unique
  description    String?
  maxDaysPerYear Int?
  isActive       Boolean?       @default(true)
  createdAt      DateTime?      @default(now()) @db.Timestamptz(6)
  leaveRequests  LeaveRequest[]

  @@map("leave_types")
}

model LeaveRequest {
  id          String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String          @db.Uuid
  leaveTypeId String          @db.Uuid
  startDate   DateTime        @db.Timestamptz(6)
  endDate     DateTime        @db.Timestamptz(6)
  days        Decimal         @db.Decimal(4, 1)
  reason      String?
  status      LeaveStatus?    @default(PENDING)
  submittedAt DateTime?       @default(now()) @db.Timestamptz(6)
  approvals   LeaveApproval[]
  leaveType   LeaveType       @relation(fields: [leaveTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("leave_requests")
}

model LeaveApproval {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  leaveRequestId String       @db.Uuid
  approverId     String       @db.Uuid
  status         LeaveStatus? @default(PENDING)
  comments       String?
  decidedAt      DateTime?    @db.Timestamptz(6)
  createdAt      DateTime?    @default(now()) @db.Timestamptz(6)
  approver       User         @relation(fields: [approverId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  leaveRequest   LeaveRequest @relation(fields: [leaveRequestId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("leave_approvals")
}

model ShiftSchedule {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  teamId      String    @db.Uuid
  name        String
  description String?
  startDate   DateTime  @db.Timestamptz(6)
  endDate     DateTime? @db.Timestamptz(6)
  isActive    Boolean?  @default(true)
  createdAt   DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  team        Team      @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  shifts      Shift[]

  @@map("shift_schedules")
}

model Shift {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  scheduleId   String        @db.Uuid
  userId       String        @db.Uuid
  date         DateTime      @db.Date
  startTime    DateTime      @db.Time(6)
  endTime      DateTime      @db.Time(6)
  breakMinutes Int?          @default(0)
  notes        String?
  status       ShiftStatus?  @default(SCHEDULED)
  schedule     ShiftSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([scheduleId, userId, date])
  @@map("shifts")
}

enum AccessLevel {
  FULL_ACCESS
  ORGANIZATION
  PROJECT
  TEAM
  INDIVIDUAL
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TimeSessionStatus {
  RUNNING
  PAUSED
  COMPLETED
  CANCELLED
}

enum IntegrationType {
  PROJECT_MANAGEMENT
  MONITORING
  ANALYTICS
  AUTHENTICATION
  COMMUNICATION
  FILE_STORAGE
}

enum IntegrationStatus {
  INACTIVE
  ACTIVE
  ERROR
  SYNCING
}

enum NotificationType {
  SYSTEM
  PROJECT_UPDATE
  TIME_REMINDER
  APPROVAL_REQUEST
  ACHIEVEMENT
  MENTION
}

enum ImportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  PARTIAL
}

enum ExportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum CustomFieldType {
  TEXT
  NUMBER
  DATE
  BOOLEAN
  SELECT
  MULTI_SELECT
  EMAIL
  URL
}

enum KnowledgeBaseType {
  GENERAL
  PROJECT_SPECIFIC
  TECHNICAL_DOCS
  POLICIES
  FAQ
}

enum DocumentType {
  TEXT
  PDF
  WORD
  EXCEL
  IMAGE
  VIDEO
  AUDIO
  CODE
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum ShiftStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

model Cache {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key       String   @unique
  value     String
  expiresAt DateTime @db.Timestamptz(6)
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  @@index([key], map: "idx_cache_key")
  @@index([expiresAt], map: "idx_cache_expires_at")
  @@map("cache")
}
